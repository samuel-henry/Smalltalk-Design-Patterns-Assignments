TestCase subclass: #AccountTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW1-Tests'!!AccountTests methodsFor: 'testing' stamp: 'sjh 4/22/2013 00:54'!testPrintSummary		| testAccount today printOutput |	testAccount := Account new initializeWithBalance: 500. "create a new abstract Account".	today := Date today printString.	printOutput := String cr, 'Account Summary: ', String cr, 'Balance: 500', String cr, 'Last updated: ', today.	self should: [ testAccount printSummary printString = printOutput ].	! !!AccountTests methodsFor: 'testing' stamp: 'sjh 4/22/2013 00:38'!testUpdateBalance	| testAccount |	testAccount := Account new initializeWithBalance: 500. "create a new abstract Account"	testAccount updateBalance: 700. "update the account's balance with the abstract template accessor"	self should: [ testAccount balance = 700 ]. "confirm its balance"! !TestCase subclass: #CheckingAccountTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW1-Tests'!!CheckingAccountTests methodsFor: 'testing' stamp: 'sjh 4/22/2013 00:33'!testCalcInterest	"test that we calculate interest properly"	| testCheckingAccount pastDate |	testCheckingAccount := CheckingAccount new initializeWithBalance: 500.		self should: [ testCheckingAccount calcInterest = 0 ]. "make sure calcInterest returns 0 before the year has changed"		pastDate := Date today subtractDays: 365. "get the Date one year ago"	testCheckingAccount lastUpdatedDate: pastDate. "set the lastUpdatedDate to a year ago"	self should: [ testCheckingAccount calcInterest = 0 ]. "confirm $0 of interest accrued in a year"	! !!CheckingAccountTests methodsFor: 'testing' stamp: 'sjh 4/22/2013 00:28'!testCreateCheckingAccount	"make sure we can create a Checking account and initialize it"	| testCheckingAccount |	testCheckingAccount := CheckingAccount new initializeWithBalance: 500.	self should: [testCheckingAccount balance = 500].	self should: [testCheckingAccount lastUpdatedDate = Date today].! !!CheckingAccountTests methodsFor: 'testing' stamp: 'sjh 4/22/2013 00:35'!testUpdateBalance	"test that we can update a CheckingAccount's balance properly"	| testCheckingAccount |	testCheckingAccount := CheckingAccount new initializeWithBalance: 500. "create a new CheckingAccount"	self should: [ testCheckingAccount balance = 500 ]. "confirm its balance"	testCheckingAccount balance: 600. "update the account's balance with the concrete accessor"	self should: [ testCheckingAccount balance = 600 ]. "confirm its balance"	testCheckingAccount updateBalance: 700. "update the account's balance with the abstract template accessor"	self should: [ testCheckingAccount balance = 700 ]. "confirm its balance"! !TestCase subclass: #CourseTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW1-Tests'!!CourseTests methodsFor: 'testing' stamp: 'sjh 4/21/2013 21:03'!testAddStudent	"test that adding students works up to the max enrollment"	| testCourse |	testCourse := Course newOfMaxEnrollment: 3. "create a new Course that can hold 3 students"	self should: [testCourse currentEnrollment = 0].	testCourse addStudent: 'Sam'.	self should: [testCourse currentEnrollment = 1].	testCourse addStudent: 'Chris'.	self should: [testCourse currentEnrollment = 2].	testCourse addStudent: 'Erin'.	self should: [testCourse currentEnrollment = 3].	testCourse addStudent: 'Mike'.	self should: [testCourse currentEnrollment = 3]. "make sure attempting to add a fourth student is unsuccessful"! !!CourseTests methodsFor: 'testing' stamp: 'sjh 4/21/2013 21:02'!testCreateCourse	"test that course creation and initialization works properly"	| course |	course := Course new initializeStudents.	self shouldnt: [ course isNil ]. "make sure a Course was created"	self shouldnt: [ course students isNil ]. "...and that the new Course initialized students"! !TestCase subclass: #RegistrarTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW1-Tests'!!RegistrarTests methodsFor: 'testing' stamp: 'sjh 4/21/2013 21:01'!testAddCourses	"test adding courses to a Registrar"	| testRegistrar |	Registrar reset.	testRegistrar := Registrar getInstance.	self shouldnt: [testRegistrar courses isNil].	testRegistrar addCourse: Course new.	self should: [testRegistrar courses size = 1]. "there should be one course in Registrar after adding one course"	Registrar reset.! !!RegistrarTests methodsFor: 'testing' stamp: 'sjh 4/21/2013 20:15'!testEnrollStudentInCourse	"test enrolling a student in a course"	| testRegistrar testCourse |	Registrar reset.	testRegistrar := Registrar getInstance. "get Registrar instance"	testCourse := Course newOfMaxEnrollment: 3. "create a new course"	testCourse initializeStudents. "initialize the course's students"	testCourse name: 'Physics'. "set the course's name"		testCourse addStudent: 'Sam'. "add a student manually"	self should: [testCourse students contains: [:each | each = 'Sam']]. "make sure the course has a student with this name"	testRegistrar addCourse: testCourse. "add the course to the registrar"	self should: [testRegistrar courses contains: [:each | each name = 'Physics']]. "make sure the Registrar has this course"	testCourse := testRegistrar courses detect: [:each | each name = 'Physics']. "get this course from the Registrar"	self should: [testCourse students contains: [:each | each = 'Sam']]. "make sure the Registrar has our student in this course"		testRegistrar enrollStudent: 'Peter' inCourse: testCourse. "add a student with the Registrar's enroll message"	self should: [testCourse students contains: [:each | each = 'Peter']]. "make sure the Registrar has our student in this course"		Registrar reset.! !!RegistrarTests methodsFor: 'testing' stamp: 'sjh 4/21/2013 19:11'!testGetInstance	"test the getInstance message"	| firstCallToGetInstance secondCallToGetInstance |	Registrar reset.	firstCallToGetInstance := Registrar getInstance. "assign an instance of Registrar to firstCallToGetInstance"	self shouldnt: [firstCallToGetInstance isNil]. "firstCallToGetInstance should not be nil"	self shouldnt:[ firstCallToGetInstance courses isNil]. "courses should be initialized"	secondCallToGetInstance := Registrar getInstance. "assign an instance of Registrar to secondCallToGetInstance"	self shouldnt: [secondCallToGetInstance isNil]. "secondCallToGetInstance should not be nil"	self should: [firstCallToGetInstance = secondCallToGetInstance]. "firstCallToGetInstance should equal secondCallToGetInstance"	firstCallToGetInstance courses: nil.	Registrar reset.! !!RegistrarTests methodsFor: 'testing' stamp: 'sjh 4/21/2013 15:55'!testNewRegistrar	"calling new on Registrar should return an error because Registrar is a Singleton"	self should: [ Registrar new ] raise: Error! !TestCase subclass: #SavingsAccountTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW1-Tests'!!SavingsAccountTests methodsFor: 'testing' stamp: 'sjh 4/22/2013 00:22'!testCalcInterest	"test that we calculate interest properly"	| testSavingsAccount pastDate |	testSavingsAccount := SavingsAccount new initializeWithBalance: 500. "create a new SavingsAccount initialized to $500"		self should: [ testSavingsAccount calcInterest = 0 ]. "make sure calcInterest returns 0 before the year has changed"		pastDate := Date today subtractDays: 365. "get the Date one year ago"	testSavingsAccount lastUpdatedDate: pastDate. "set the lastUpdatedDate to a year ago"	self should: [ testSavingsAccount calcInterest = 50.0 ]. "confirm the amount of interest accrued in a year"		testSavingsAccount := SavingsAccount new initializeWithBalance: 500. "reinitialize the SavingsAccount"	pastDate := Date today subtractDays: (365 * 4). "get the Date four years ago"	testSavingsAccount lastUpdatedDate: pastDate. "set the lastUpdatedDate to four years ago"	self should: [ testSavingsAccount calcInterest  asInteger = 232 ]. "confirm the amount of interest accrued in four years (round slightly to integer value)"! !!SavingsAccountTests methodsFor: 'testing' stamp: 'sjh 4/22/2013 00:00'!testCreateSavingsAccount	"make sure we can create a Savings account and initialize it"	| testSavingsAccount |	testSavingsAccount := SavingsAccount new initializeWithBalance: 500.	self should: [testSavingsAccount balance = 500].	self should: [testSavingsAccount lastUpdatedDate = Date today].! !!SavingsAccountTests methodsFor: 'testing' stamp: 'sjh 4/22/2013 00:06'!testUpdateBalance	"test that we can update a SavingsAccount's balance properly"	| testSavingsAccount |	testSavingsAccount := SavingsAccount new initializeWithBalance: 500. "create a new SavingsAccount"	self should: [ testSavingsAccount balance = 500 ]. "confirm its balance"	testSavingsAccount balance: 600. "update the account's balance with the concrete accessor"	self should: [ testSavingsAccount balance = 600 ]. "confirm its balance"	testSavingsAccount updateBalance: 700. "update the account's balance with the abstract template accessor"	self should: [ testSavingsAccount balance = 700 ]. "confirm its balance"! !