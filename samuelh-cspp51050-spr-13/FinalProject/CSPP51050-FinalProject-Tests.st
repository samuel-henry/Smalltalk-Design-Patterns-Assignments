TestCase subclass: #TestFilter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestFilter methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:26'!testOutput	"confirm that we can add pipes as outputs"	| pipe1 pipe2 testFilter |		testFilter := Filter new.	pipe1 := Pipe new.	pipe2 := Pipe new.	testFilter output at: 'output1' put: pipe1; at: 'output2' put: pipe2.	self should: [ (testFilter output at: 'output1') = pipe1 ].	self should: [ (testFilter output at: 'output2') = pipe2 ].! !!TestFilter methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:26'!testPullFrom	"confirm that abastract base class raises an error on pullFrom:"	self should: [ Filter new pullFrom: Pipe new ] raise: Error.! !!TestFilter methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:27'!testPushTo	"confirm that we can push an order to a pipe"	| testFilter testPipe testOrder testOrderData testOrderItems testContactAddress testLocation testShippingMethod |		testFilter := Filter new.	testPipe := Pipe new.	testOrderData := Dictionary new.	testOrderItems := (Dictionary new) at: 'SAM-76232' put: 5; at: 'SAM-88227' put: 1; at: 'SAM-56323' put: 1; yourself.	testContactAddress := 'samueljameshenry@gmail.com'.	testLocation := Point x: 25 y: 30.	testShippingMethod := 1.	testOrderData at: 'shippingMethod' put: testShippingMethod; at: 'contactAddress' put: testContactAddress; at: 'items' put: testOrderItems; at: 'location' put: testLocation.	testOrder := Order getOrder: testOrderData.	testFilter push: testOrder to: testPipe.	self should: [ (testPipe removeFirst) = testOrder ].! !TestCase subclass: #TestInventoryManager	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestInventoryManager methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:27'!testCheckOrderItemsInStock	"confirm that stock checking is working correctly"	| testOrder testContactAddress testItems testLocation |		InventoryManager reset.		testContactAddress := '200 S. Michigan Ave., Chicago, IL'.	testItems := (Dictionary new) at: 'SAM-56323' put: 5; at: 'SAM-76232' put: 2; yourself.	testLocation := Point x: 20 y: 30.	testOrder := Order contactAddress: testContactAddress items: testItems location: testLocation.		self should: [ InventoryManager getInstance checkOrderItemsInStock: testOrder ].		testItems at: 'SAM-56323' put: 1; at: 'SAM-76232' put: 2.	testOrder := Order contactAddress: testContactAddress items: testItems location: testLocation.		"SAM-56323 is depleted from the previous order, so this order's items are not in stock"	self shouldnt: [ InventoryManager getInstance checkOrderItemsInStock: testOrder ].! !!TestInventoryManager methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:27'!testInitializeInventory	"confirm that we are initializing inventory correctly"	| testOrder testContactAddress testItems testLocation |		"remove everything from the shelves"	InventoryManager getInstance inventory: nil.		testContactAddress := '200 S. Michigan Ave., Chicago, IL'.	testLocation := Point x: 20 y: 30.	testItems := (Dictionary new) at: 'SAM-56323' put: 5; at: 'SAM-76232' put: 10; at: 'SAM-23782' put: 7; at: 'SAM-48840' put: 93; at: 'SAM-22661' put: 13; at: 'SAM-45490' put: 22; at: 'SAM-33820' put: 64; at: 'SAM-88227' put: 2; at: 'SAM-33800' put: 17; at: 'SAM-99287' put: 22; at: 'SAM-42839' put: 1; at: 'SAM-57572' put: 33; at: 'SAM-48204' put: 5; at: 'SAM-50824' put: 3; at: 'SAM-24923' put: 0; at: 'SAM-37378' put: 4; at: 'SAM-09131' put: 2; at: 'SAM-47472' put: 25; at: 'SAM-34310' put: 54; at: 'SAM-59527' put: 10; at: 'SAM-46103' put: 5; yourself.	testOrder := Order contactAddress: testContactAddress items: testItems location: testLocation.		InventoryManager getInstance initializeInventory.	self should: [ InventoryManager getInstance checkOrderItemsInStock: testOrder ].		! !!TestInventoryManager methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:28'!testReplenish	"confirm that we replensish according to our simple strategy of doubling a shortage after determining that we don't have enough stock on hand"	InventoryManager reset.	(InventoryManager getInstance) replenish: 'SAM-56323' from: 3.	self should: [ (InventoryManager getInstance inventory at: 'SAM-56323') = 11 ].! !TestCase subclass: #TestOrder	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestOrder methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:29'!testCreateWithParameters	"test initialization of an order with parameters"	| testOrder testContactAddress testItems testLocation |		testContactAddress := '200 S. Michigan Ave., Chicago, IL'.	testItems := (Dictionary new) at: 'SAM-12345' put: 5; at: 'SAM-67890' put: 2; yourself.	testLocation := Point x: 20 y: 30.	testOrder := Order contactAddress: testContactAddress items: testItems location: testLocation.		self should: [ testOrder contactAddress = testContactAddress ].	self should: [ testOrder items = testItems ].	self should: [ testOrder location = testLocation ].! !!TestOrder methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:29'!testGetOrder	"test that our factory method returns a concrete Order of the right type"	| testOrder testOrderData testOrderItems testContactAddress testLocation testShippingMethod |		testOrderData := Dictionary new.	testOrderItems := (Dictionary new) at: 'SAM-76232' put: 5; at: 'SAM-88227' put: 1; at: 'SAM-56323' put: 1; yourself.	testContactAddress := 'samueljameshenry@gmail.com'.	testLocation := Point x: 25 y: 30.	testShippingMethod := 1.	testOrderData at: 'shippingMethod' put: testShippingMethod; at: 'contactAddress' put: testContactAddress; at: 'items' put: testOrderItems; at: 'location' put: testLocation.		testOrder := Order getOrder: testOrderData.	self should: [ testOrder isKindOf: OneDayOrder ].	self should: [ testOrder location = testLocation ].	self should: [ testOrder contactAddress = testContactAddress ].	self should: [ testOrder items = testOrderItems ].		testShippingMethod := 3.	testOrderData at: 'shippingMethod' put: testShippingMethod.	testOrder := Order getOrder: testOrderData.	self should: [ testOrder isKindOf: ThreeDayOrder ].	self should: [ testOrder location = testLocation ].	self should: [ testOrder contactAddress = testContactAddress ].	self should: [ testOrder items = testOrderItems ].		testShippingMethod := 7.	testOrderData at: 'shippingMethod' put: testShippingMethod.	testOrder := Order getOrder: testOrderData.	self should: [ testOrder isKindOf: SevenDayOrder ].	self should: [ testOrder location = testLocation ].	self should: [ testOrder contactAddress = testContactAddress ].	self should: [ testOrder items = testOrderItems ].	! !!TestOrder methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:29'!testPrintString	"confirm that our pretty-print string is correct"	| testOrder testContactAddress testItems testLocation |		testContactAddress := '200 S. Michigan Ave., Chicago, IL'.	testItems := (Dictionary new) at: 'SAM-12345' put: 5; at: 'SAM-67890' put: 2; yourself.	testLocation := Point x: 20 y: 30.	testOrder := Order contactAddress: testContactAddress items: testItems location: testLocation.		self should: [ testOrder printString = (testContactAddress, String tab, testLocation, String tab, 'SAM-12345', String tab, '5', String tab, 'SAM-67890', String tab, '2') ].! !TestCase subclass: #TestOrderAccepterFilter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestOrderAccepterFilter methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:30'!testPullFrom	"confirm that we're properly pulling raw order data and creating concrete orders in the Accepter filter"	| items testInputPipe testOutputPipe testAccepterFilter orderData |		orderData := Dictionary new.	items := Dictionary new.	items at: 'SAM-76232' put: 5; at: 'SAM-88227' put: 1.	orderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'samuelhenry@gmail.com'; at: 'items' put: items; at: 'location' put: (Point x: 25 y: 30).	testInputPipe := Pipe new.	testInputPipe add: orderData.	testOutputPipe := Pipe new.	testAccepterFilter := OrderAccepterFilter new.	testAccepterFilter output at: 'placability' put: testOutputPipe.	testAccepterFilter pullFrom: testInputPipe.	self should: [ (testOutputPipe removeFirst printString) = ((Order getOrder: orderData) printString) ].! !TestCase subclass: #TestOrderCreatorFilter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestOrderCreatorFilter methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:31'!testPullFrom	"confirm that we're correctly attaching a priority to an order on its way to the PickQueue, piping it to be logged to the flat file, and piping it to the customer notifier"	| items testInputPipe testLoggerOutputPipe testNotifierOutputPipe testOrderCreatorFilter orderData testOrder orderFromPipe testPickQueue |		orderData := Dictionary new.	items := Dictionary new.	items at: 'SAM-76232' put: 5; at: 'SAM-88227' put: 1.	orderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'samuelhenry@gmail.com'; at: 'items' put: items; at: 'location' put: (Point x: 25 y: 30).	testOrder := Order getOrder: orderData.	testInputPipe := Pipe new.	testInputPipe add: testOrder.	testLoggerOutputPipe := Pipe new.	testNotifierOutputPipe := Pipe new.	testPickQueue := PickQueue new.	testOrderCreatorFilter := OrderCreatorFilter new.	testOrderCreatorFilter output at: 'logger' put: testLoggerOutputPipe.	testOrderCreatorFilter output at: 'notifier' put: testNotifierOutputPipe.	(testOrderCreatorFilter output) at: 'pickQueue' put: testPickQueue.	testOrderCreatorFilter pullFrom: testInputPipe.	self should: [ (testLoggerOutputPipe removeFirst printString) = ((Order getOrder: orderData) printString) ].	orderFromPipe := testNotifierOutputPipe removeFirst.	self should: [ ((orderFromPipe at: 'order') printString) = ((Order getOrder: orderData) printString) ].	self should: [ (orderFromPipe at: 'message') = (OrderCreatorFilter placedOrderMessage) ].	self should: [ (((testPickQueue peek payload) at: 'order') printString) = ((Order getOrder: orderData) printString) ].	self should: [ ((testPickQueue peek payload) at: 'priority') = 1 ].! !TestCase subclass: #TestOrderPlacabilityFilter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestOrderPlacabilityFilter methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:31'!testPullFrom	"confirm that we're correctly determining placability and piping to either the notifier or the creator per placability"	| items testInputPipe testCreatorOutputPipe testNotifierOutputPipe testOrderPlacabilityFilter orderData testOrder orderFromPipe |		InventoryManager reset.		"create a placeable order"	orderData := Dictionary new.	items := Dictionary new.	items at: 'SAM-76232' put: 5; at: 'SAM-88227' put: 1.	orderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'samuelhenry@gmail.com'; at: 'items' put: items; at: 'location' put: (Point x: 25 y: 30).	testOrder := Order getOrder: orderData.		"create an input pipe to pull from"	testInputPipe := Pipe new.	testInputPipe add: testOrder.		"create a placability filter"	testOrderPlacabilityFilter := OrderPlacabilityFilter new.		"attach outputs to the placability filter"	testCreatorOutputPipe := Pipe new.	testNotifierOutputPipe := Pipe new.	testOrderPlacabilityFilter output at: 'creator' put: testCreatorOutputPipe.	testOrderPlacabilityFilter output at: 'notifier' put: testNotifierOutputPipe.		"process the order"	testOrderPlacabilityFilter pullFrom: testInputPipe.		"order should be in pipe toward a Creator"	self should: [ (testCreatorOutputPipe removeFirst printString) = ((Order getOrder: orderData) printString) ].		"order should have been piped toward a Creator, so the pipe toward a Notifier should be empty"	self should: [ testNotifierOutputPipe isEmpty ].		"create an unplacable order"	orderData := Dictionary new.	items := Dictionary new.	items at: 'SAM-76232' put: 5000; at: 'SAM-88227' put: 1.	orderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'samuelhenry@gmail.com'; at: 'items' put: items; at: 'location' put: (Point x: 25 y: 30).	testOrder := Order getOrder: orderData.		"put it in the input pipe"	testInputPipe add: testOrder.		"process the order"	testOrderPlacabilityFilter pullFrom: testInputPipe.		"order should have been piped toward a Notifier, so the Creator pipe should be empty"	self should: [ testCreatorOutputPipe isEmpty ].		"order should be in pipe toward a Notifier"	orderFromPipe := testNotifierOutputPipe removeFirst.	self should: [ ((orderFromPipe at: 'order') printString) = ((Order getOrder: orderData) printString) ].	self should: [ (orderFromPipe at: 'message') = (OrderPlacabilityFilter unplacableMessage) ].! !TestCase subclass: #TestPickQueue	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestPickQueue methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 15:05'!testPickQueue	"test that we're able to carry out priority queue operations"	| testOneDayOrder1 testOneDayOrder2 testThreeDayOrder1 testThreeDayOrder2 testSevenDayOrder1 testSevenDayOrder2 testOneDayOrder1Message testOneDayOrder2Message testThreeDayOrder1Message testThreeDayOrder2Message testSevenDayOrder1Message testSevenDayOrder2Message testQueue |		testOneDayOrder1 := OneDayOrder new.	testOneDayOrder2 := OneDayOrder new.	testThreeDayOrder1 := ThreeDayOrder new.	testThreeDayOrder2 := ThreeDayOrder new.	testSevenDayOrder1 := SevenDayOrder new. 	testSevenDayOrder2 := SevenDayOrder new. 		testQueue := PickQueue new initialize.	testOneDayOrder1Message := PickMessage new payload: (testOneDayOrder1 accept: PrepareForPickVisitor new).	testOneDayOrder2Message := PickMessage new payload: (testOneDayOrder2 accept: PrepareForPickVisitor new).	testThreeDayOrder1Message := PickMessage new payload: (testThreeDayOrder1 accept: PrepareForPickVisitor new).	testThreeDayOrder2Message := PickMessage new payload: (testThreeDayOrder2 accept: PrepareForPickVisitor new).	testSevenDayOrder1Message := PickMessage new payload: (testSevenDayOrder1 accept: PrepareForPickVisitor new).	testSevenDayOrder2Message := PickMessage new payload: (testSevenDayOrder2 accept: PrepareForPickVisitor new).		"add prioritized, time-aware messages to the queue"	testQueue addMsg: testOneDayOrder1Message; addMsg: testThreeDayOrder1Message; addMsg: testSevenDayOrder1Message;  addMsg: testSevenDayOrder2Message;  addMsg: testThreeDayOrder2Message;  addMsg: testOneDayOrder2Message.		"confirm that priority queue operations work properly"	self should: [ testQueue size = 6 ].	self should: [ testQueue peek = testOneDayOrder1Message ].	self should: [ testQueue size = 6 ].	self should: [ testQueue popMsg = testOneDayOrder1Message ].	self should: [ testQueue size = 5 ].	self should: [ testQueue peek = testOneDayOrder2Message ].	self should: [ testQueue size = 5 ].	self should: [ testQueue popMsg = testOneDayOrder2Message ].	self should: [ testQueue size = 4 ].	self should: [ testQueue peek = testThreeDayOrder1Message ].	self should: [ testQueue size = 4 ].	self should: [ testQueue popMsg = testThreeDayOrder1Message ].	self should: [ testQueue size = 3 ].	self should: [ testQueue peek = testThreeDayOrder2Message ].	self should: [ testQueue size = 3 ].	self should: [ testQueue popMsg = testThreeDayOrder2Message ].	self should: [ testQueue size = 2 ].	self should: [ testQueue peek = testSevenDayOrder1Message ].	self should: [ testQueue size = 2 ].	self should: [ testQueue popMsg = testSevenDayOrder1Message ].	self should: [ testQueue size = 1 ].	self should: [ testQueue peek = testSevenDayOrder2Message ].	self should: [ testQueue size = 1 ].	self should: [ testQueue popMsg = testSevenDayOrder2Message ].	self should: [ testQueue size = 0 ].! !TestCase subclass: #TestPipe	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestPipe methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:32'!testDependency	"create some pipes and filters with dependency relations and ensure they're interoperating correctly"	| items testPipe testFilterAdder testFilterDependent orderData |		orderData := Dictionary new.	items := Dictionary new.	items at: 'SAM-76232' put: 5; at: 'SAM-88227' put: 1.	orderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'samuelhenry@gmail.com'; at: 'items' put: items; at: 'location' put: (Point x: 25 y: 30).	testPipe := Pipe new.	testFilterAdder := OrderAccepterFilter new.	testFilterAdder output at: 'placability' put: testPipe.		testFilterDependent := OrderPlacabilityFilter new.	testFilterDependent output at: 'creator' put: Pipe new.	testFilterDependent output at: 'notifier' put: Pipe new.	testPipe addDependent: testFilterDependent.		testFilterAdder push: (Order getOrder: orderData) to: testPipe.! !!TestPipe methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:32'!testPipe	"confirm that we can carry out pipe operations"	| testPipe testOrder1 testOrder2 |		testPipe := Pipe new.	testOrder1 := Order new.	testOrder2 := Order new.	testPipe add: testOrder1.	self shouldnt: [ testPipe isEmpty ].	self should: [ testPipe size = 1 ].	testPipe add: testOrder2.	self should: [ testPipe size = 2 ].	self should: [ testPipe removeFirst = testOrder1 ].	self should: [ testPipe size = 1 ].	self should: [ testPipe removeFirst = testOrder2 ].	self should: [ testPipe isEmpty ].! !TestCase subclass: #TestPlacabilityVisitor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestPlacabilityVisitor methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:32'!testPlacability	"confirm that we're determining placability correctly with our placability visitor"	| testOrderData testItems testOrder |	"visit a placable 1 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-76232' put: 5; at: 'SAM-88227' put: 1; at: 'SAM-56323' put: 1; yourself.	testOrderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'samueljameshenry@gmail.com'; at: 'items' put: testItems; at: 'location' put: (Point x: 25 y: 30).	testOrder := Order getOrder: testOrderData.	self should: [ testOrder accept: PlacabilityVisitor new ].		InventoryManager reset.	"visit a placable 3 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-48204' put: 3; at: 'SAM-09131' put: 1; at: 'SAM-57572' put: 22; yourself.	testOrderData at: 'shippingMethod' put: 3; at: 'contactAddress' put: 't-bangalter@free.fr'; at: 'items' put: testItems; at: 'location' put: (Point x: 25 y: 20).	testOrder := Order getOrder: testOrderData.	self should: [ testOrder accept: PlacabilityVisitor new ].		"visit a placable 7 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-34310' put: 2; at: 'SAM-99287' put: 1; yourself.	testOrderData at: 'shippingMethod' put: 7; at: 'contactAddress' put: 'samueljameshenry@gmail.com'; at: 'items' put: testItems; at: 'location' put: (Point x: 25 y: 30).	testOrder := Order getOrder: testOrderData.	self should: [ testOrder accept: PlacabilityVisitor new ].		"visit an unplacable (stock) 1 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-76232' put: 500; yourself.	testOrderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'samueljameshenry@gmail.com'; at: 'items' put: testItems; at: 'location' put: (Point x: 25 y: 30).	testOrder := Order getOrder: testOrderData.	self shouldnt: [ testOrder accept: PlacabilityVisitor new ].		"visit an unplacable (distance) 1 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-76232' put: 1; at: 'SAM-88227' put: 1; at: 'SAM-56323' put: 1; yourself.	testOrderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'farfromhome@gmail.com'; at: 'items' put: testItems; at: 'location' put: (Point x: 5000 y: 3000).	testOrder := Order getOrder: testOrderData.	self shouldnt: [ testOrder accept: PlacabilityVisitor new ].		"visit an unplacable (stock) 3 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-33820' put: 500; yourself.	testOrderData at: 'shippingMethod' put: 3; at: 'contactAddress' put: 'samueljameshenry@gmail.com'; at: 'items' put: testItems; at: 'location' put: (Point x: 25 y: 30).	testOrder := Order getOrder: testOrderData.	self shouldnt: [ testOrder accept: PlacabilityVisitor new ].		"visit an unplacable (distance) 3 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-76232' put: 1; at: 'SAM-88227' put: 1; at: 'SAM-56323' put: 1; yourself.	testOrderData at: 'shippingMethod' put: 3; at: 'contactAddress' put: 'farfromhome@gmail.com'; at: 'items' put: testItems; at: 'location' put: (Point x: 15000 y: 9000).	testOrder := Order getOrder: testOrderData.	self shouldnt: [ testOrder accept: PlacabilityVisitor new ].		"visit an unplacable (stock) 7 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-42839' put: 500; yourself.	testOrderData at: 'shippingMethod' put: 7; at: 'contactAddress' put: 'samueljameshenry@gmail.com'; at: 'items' put: testItems; at: 'location' put: (Point x: 25 y: 30).	testOrder := Order getOrder: testOrderData.	self shouldnt: [ testOrder accept: PlacabilityVisitor new ].		"visit an unplacable (distance) 7 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-76232' put: 1; at: 'SAM-88227' put: 1; at: 'SAM-56323' put: 1; yourself.	testOrderData at: 'shippingMethod' put: 7; at: 'contactAddress' put: 'farfromhome@gmail.com'; at: 'items' put: testItems; at: 'location' put: (Point x: 45000 y: 27000).	testOrder := Order getOrder: testOrderData.	self shouldnt: [ testOrder accept: PlacabilityVisitor new ].! !TestCase subclass: #TestPrepareForPickVisitor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestPrepareForPickVisitor methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 13:33'!testPrepareForPick	"confirm that we're correctly attaching priorities to orders"	| testOrderData testItems testOrder |	"visit a 1 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-76232' put: 5; at: 'SAM-88227' put: 1; at: 'SAM-56323' put: 1; yourself.	testOrderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'samueljameshenry@gmail.com'; at: 'items' put: testItems; at: 'location' put: (Point x: 25 y: 30).	testOrder := Order getOrder: testOrderData.	self should: [ ((testOrder accept: PrepareForPickVisitor new) at: 'priority') = 1 ].	self should: [ ((testOrder accept: PrepareForPickVisitor new) at: 'order') = testOrder ].		InventoryManager reset.	"visit a placable 3 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-48204' put: 3; at: 'SAM-09131' put: 1; at: 'SAM-57572' put: 22; yourself.	testOrderData at: 'shippingMethod' put: 3; at: 'contactAddress' put: 't-bangalter@free.fr'; at: 'items' put: testItems; at: 'location' put: (Point x: 25 y: 20).	testOrder := Order getOrder: testOrderData.	self should: [ ((testOrder accept: PrepareForPickVisitor new) at: 'priority') = 3 ].	self should: [ ((testOrder accept: PrepareForPickVisitor new) at: 'order') = testOrder ].		"visit a placable 7 day order"	testOrderData := Dictionary new.	testItems := (Dictionary new) at: 'SAM-34310' put: 2; at: 'SAM-99287' put: 1; yourself.	testOrderData at: 'shippingMethod' put: 7; at: 'contactAddress' put: 'samueljameshenry@gmail.com'; at: 'items' put: testItems; at: 'location' put: (Point x: 25 y: 30).	testOrder := Order getOrder: testOrderData.	self should: [ ((testOrder accept: PrepareForPickVisitor new) at: 'priority') = 7 ].	self should: [ ((testOrder accept: PrepareForPickVisitor new) at: 'order') = testOrder ].! !TestCase subclass: #TestSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-FinalProject-Tests'!!TestSystem methodsFor: 'as yet unclassified' stamp: 'sjh 6/3/2013 14:41'!testEntireSystem	"test the whole system. view the generated order output files and additions to the 'SAM-Orders' flat file in /Squeak-4.4-All-in-One.app/Contents/Resources"	| accepterFilter placabilityFilter creatorFilter notifierFilter pickQueue loggerFilter systemInputPipe accepterToPlacabilityPipe placabilityToCreatorPipe placabilityToNotifierPipe creatorToLoggerPipe creatorToNotifierPipe orderData items |		"reset inventory manager"	InventoryManager reset.		"create architecture"	accepterFilter := OrderAccepterFilter new.	placabilityFilter := OrderPlacabilityFilter new.	creatorFilter := OrderCreatorFilter new.	notifierFilter := CustomerNotifierFilter new.	pickQueue := PickQueue new initialize.	loggerFilter := LoggerFilter new.	systemInputPipe := Pipe new.	accepterToPlacabilityPipe := Pipe new.	placabilityToCreatorPipe := Pipe new.	placabilityToNotifierPipe := Pipe new.	creatorToLoggerPipe := Pipe new.	creatorToNotifierPipe := Pipe new.		"create outputs"	accepterFilter output at: 'placability' put: accepterToPlacabilityPipe.	placabilityFilter output at: 'creator' put: placabilityToCreatorPipe.	placabilityFilter output at: 'notifier' put: placabilityToNotifierPipe.	creatorFilter output at: 'logger' put: creatorToLoggerPipe.	creatorFilter output at: 'notifier' put: creatorToNotifierPipe.	creatorFilter output at: 'pickQueue' put: pickQueue.		"add dependencies"	accepterToPlacabilityPipe addDependent: placabilityFilter.	placabilityToCreatorPipe addDependent: creatorFilter.	placabilityToNotifierPipe addDependent: notifierFilter.	creatorToLoggerPipe addDependent: loggerFilter.	creatorToNotifierPipe addDependent: notifierFilter.	systemInputPipe addDependent: accepterFilter.		"process a placable 1 day order"	orderData := Dictionary new.	items := (Dictionary new) at: 'SAM-76232' put: 5; at: 'SAM-88227' put: 1; at: 'SAM-56323' put: 1; yourself.	orderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'samueljameshenry@gmail.com'; at: 'items' put: items; at: 'location' put: (Point x: 25 y: 30).	systemInputPipe add: orderData.		"process a placable 3 day order"	orderData := Dictionary new.	items := (Dictionary new) at: 'SAM-33800' put: 3; at: 'SAM-48840' put: 1; at: 'SAM-57572' put: 22; yourself.	orderData at: 'shippingMethod' put: 3; at: 'contactAddress' put: 't-bangalter@free.fr'; at: 'items' put: items; at: 'location' put: (Point x: 125 y: 20).	systemInputPipe add: orderData.		"process a placable 7 day order"	orderData := Dictionary new.	items := (Dictionary new) at: 'SAM-34310' put: 2; at: 'SAM-47472' put: 1; yourself.	orderData at: 'shippingMethod' put: 7; at: 'contactAddress' put: 'samueljameshenry@gmail.com'; at: 'items' put: items; at: 'location' put: (Point x: 25 y: 30).	systemInputPipe add: orderData.		"process an unplacable (stock) 1 day order"	orderData := Dictionary new.	items := (Dictionary new) at: 'SAM-76232' put: 500; yourself.	orderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'samueljameshenry@gmail.com'; at: 'items' put: items; at: 'location' put: (Point x: 25 y: 30).	systemInputPipe add: orderData.		"process an unplacable (distance) 1 day order"	orderData := Dictionary new.	items := (Dictionary new) at: 'SAM-76232' put: 1; at: 'SAM-88227' put: 1; at: 'SAM-56323' put: 1; yourself.	orderData at: 'shippingMethod' put: 1; at: 'contactAddress' put: 'farfromhome@gmail.com'; at: 'items' put: items; at: 'location' put: (Point x: 5000 y: 3000).	systemInputPipe add: orderData.! !