TestCase subclass: #MessageQueueTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Problem1-Tests'!!MessageQueueTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 09:21'!testAddMsg	"confirm that adding a message to a queue is working properly"	| queue aReplyMsg aQueryMsg |		queue := MessageQueue new.	self should: [queue size = 0]. "confirm that queue starts empty"		aReplyMsg := ReplyMsg new.	queue addMsg: aReplyMsg.	self should: [queue size = 1]. "confirm that a message has been added"		aQueryMsg := QueryMsg new.	queue addMsg: aQueryMsg.	self should: [queue size = 2]. "confirm that a second message has been added"! !!MessageQueueTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 09:20'!testIsEmpty	"confirm that check for empty queue is working properly"	| queue |		queue := MessageQueue new.	self should: [queue isEmpty]. "queue should be empty after being created"	queue addMsg: ReplyMsg new.	self shouldnt: [queue isEmpty]. "queue should not be empty after adding a message"	queue popMsg.	self should: [queue isEmpty]. "queue should be empty after popping its only message"! !!MessageQueueTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 09:22'!testPeek	"confirm that peeking into a queue is working properly"	| queue aReplyMsg |		queue := MessageQueue new.	aReplyMsg := ReplyMsg new.	queue addMsg: aReplyMsg.	self should: [queue size = 1].	self should: [queue peek = aReplyMsg]. "confirm that if we peek we see the message we just added above"	self should: [queue size = 1]. "confirm that peeking doesn't remove the message from the queue"! !!MessageQueueTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 09:23'!testPopMsg	"confirm that popping a message from our queue is working properly"	| queue aReplyMsg msgFromQueue |		"create an empty queue"	queue := MessageQueue new.	self should: [queue size = 0].		"add a message to our queue"	aReplyMsg := ReplyMsg new.	queue addMsg: aReplyMsg. 	self should: [queue size = 1].		"pop a message from our queue"	msgFromQueue := queue popMsg.	self should: [queue size = 0].		"confirm that we popped the above message from our queue"	self should: [msgFromQueue = aReplyMsg].! !