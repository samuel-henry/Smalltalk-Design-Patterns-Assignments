Object subclass: #Component	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2'!!Component methodsFor: 'accessing' stamp: 'sjh 5/2/2013 14:01'!componentValue	^ self subclassResponsibility! !Component subclass: #Composite	instanceVariableNames: 'components'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2'!!Composite methodsFor: 'initialize-release' stamp: 'sjh 5/1/2013 16:33'!initialize	self components: OrderedCollection new! !!Composite methodsFor: 'accessing' stamp: 'sjh 4/29/2013 21:06'!addComponent: anObject	components add: anObject! !!Composite methodsFor: 'accessing' stamp: 'sjh 5/2/2013 14:07'!componentValue	^ self components		inject: 0		into: [ :sum :component | sum + component componentValue ]! !!Composite methodsFor: 'accessing' stamp: 'sjh 4/29/2013 21:43'!components	^ components! !!Composite methodsFor: 'accessing' stamp: 'sjh 4/29/2013 21:08'!components: anObject	components := anObject! !!Composite methodsFor: 'accessing' stamp: 'sjh 5/1/2013 16:07'!iterator	^self subclassResponsibility! !!Composite methodsFor: 'accessing' stamp: 'sjh 4/30/2013 11:32'!removeComponent: anObject	components remove: anObject! !Composite subclass: #AccountComposite	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2'!!AccountComposite methodsFor: 'accessing' stamp: 'sjh 4/29/2013 22:34'!addComponent: anObject(anObject isKindOf: Leaf) 	ifTrue: [ super addComponent: anObject ] 	ifFalse: [ self error: 'You may only add Leaf objects to AccountComposites' ]! !!AccountComposite methodsFor: 'accessing' stamp: 'sjh 5/2/2013 15:04'!iterator	^PortfolioIterator on: components from: 1 to: components size! !Component subclass: #Leaf	instanceVariableNames: 'componentValue issuer'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2'!!Leaf methodsFor: 'accessing' stamp: 'sjh 5/2/2013 14:03'!componentValue	^ componentValue! !!Leaf methodsFor: 'accessing' stamp: 'sjh 5/2/2013 14:03'!componentValue: anObject	componentValue := anObject! !!Leaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 22:58'!issuer	^ issuer! !!Leaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 22:58'!issuer: anObject	issuer := anObject! !Leaf subclass: #BondLeaf	instanceVariableNames: 'principal coupon issueDate'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2'!!BondLeaf methodsFor: 'accessing' stamp: 'sjh 5/2/2013 14:04'!componentValue 	"calculate the value of a bond in terms of the principal and the interest that has accrued for a bond since its issuance"	| yearsSinceIssued today accruedValue |		"set tempBalance to the principal"	accruedValue := principal.		"get today"	today := Date today.		"get number of Jan 1sts since the bond was issued"	yearsSinceIssued :=  today year - issueDate year.		"for each of these, update tempBalance += interest rate * tempBalance" 	yearsSinceIssued timesRepeat: [ accruedValue := accruedValue + (coupon * accruedValue) ].			^ accruedValue ! !!BondLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 23:22'!coupon	^ coupon! !!BondLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 23:22'!coupon: anObject	coupon := anObject! !!BondLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 22:50'!issueDate	^ issueDate! !!BondLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 22:50'!issueDate: anObject	issueDate := anObject! !!BondLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 22:49'!principal	^ principal! !!BondLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 22:49'!principal: anObject	principal := anObject! !Leaf subclass: #MoneyMarketLeaf	instanceVariableNames: 'discountValue matureValue daysToMaturity issueDate'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2'!!MoneyMarketLeaf methodsFor: 'accessing' stamp: 'sjh 5/2/2013 14:03'!componentValue"calculate the value of a bond in terms of the principal and the interest that has accrued for a bond since its issuance"	| daysSinceIssued today |	"get today"	today := Date today.		"get number of days since the MoneyMarket security was issued"	daysSinceIssued :=  today subtractDate: issueDate.		"calculate value of MoneyMarket security:"	"if the security has matured, return the mature value"	"otherwise return the discount value + the amount of accrued value, calculated in terms of the value per day of accrual * number of days since issuance"	daysSinceIssued < daysToMaturity		ifTrue: [ ^ discountValue + (daysSinceIssued * ((matureValue - discountValue) / daysToMaturity)) ]		ifFalse: [ ^ matureValue ]! !!MoneyMarketLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 23:03'!daysToMaturity	^ daysToMaturity! !!MoneyMarketLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 23:03'!daysToMaturity: anObject	daysToMaturity := anObject! !!MoneyMarketLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 23:03'!discountValue	^ discountValue! !!MoneyMarketLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 23:03'!discountValue: anObject	discountValue := anObject! !!MoneyMarketLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 23:08'!issueDate	^ issueDate! !!MoneyMarketLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 23:08'!issueDate: anObject	issueDate := anObject! !!MoneyMarketLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 23:03'!matureValue	^ matureValue! !!MoneyMarketLeaf methodsFor: 'accessing' stamp: 'sjh 4/29/2013 23:03'!matureValue: anObject	matureValue := anObject! !Composite subclass: #PortfolioComposite	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2'!!PortfolioComposite methodsFor: 'accessing' stamp: 'sjh 5/2/2013 15:04'!iterator	^PortfolioIterator on: components from: 1 to: components size ! !ReadStream subclass: #PortfolioIterator	instanceVariableNames: 'stack'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2'!!PortfolioIterator methodsFor: 'accessing' stamp: 'sjh 5/2/2013 09:42'!currentItem	position >= readLimit		ifTrue: [^nil]		ifFalse: [^collection at: position]! !!PortfolioIterator methodsFor: 'accessing' stamp: 'sjh 5/2/2013 09:43'!first	^ collection size > 0		ifTrue: [collection at: 1]		ifFalse: nil! !!PortfolioIterator methodsFor: 'as yet unclassified' stamp: 'sjh 5/3/2013 01:27'!atEnd	| stackLast bool |	stack size > 0		ifTrue:	[stackLast := stack last. 				stack remove: stackLast.				bool := stackLast atEnd.]		ifFalse: [ bool := false ].	^ bool! !!PortfolioIterator methodsFor: 'as yet unclassified' stamp: 'sjh 5/3/2013 02:04'!hasNext	| anIterator |	stack size > 0		ifTrue: [ anIterator := stack last.				 anIterator atEnd					ifTrue: [ stack remove: anIterator.							self hasNext ]]	! !!PortfolioIterator methodsFor: 'as yet unclassified' stamp: 'sjh 5/2/2013 14:53'!initialize	stack := OrderedCollection new.	Transcript cr; show: 'initialized stack'.	stack add: self.! !!PortfolioIterator methodsFor: 'as yet unclassified' stamp: 'sjh 5/3/2013 01:41'!recursiveNext	| iteratorFromStack component |	self atEnd		ifFalse: [ iteratorFromStack := stack last.				 component := iteratorFromStack next.				 (component isKindOf: Leaf)				 			ifTrue: [ Transcript show: component issuer printString ]							ifFalse: [ stack add: component iterator initialize]].	^ component! !!PortfolioIterator methodsFor: 'as yet unclassified' stamp: 'sjh 5/2/2013 10:15'!recursiveNext: aBlock	collection do: [ :aComponent | aComponent recursiveNext: aBlock ].	aBlock value: self! !Object subclass: #PortfolioManager	instanceVariableNames: 'portfolio'	classVariableNames: 'UniqueInstance'	poolDictionaries: ''	category: 'CSPP51050-HW2'!!PortfolioManager commentStamp: '<historical>' prior: 0!Singleton class for managing registration of students in Courses!!PortfolioManager methodsFor: 'initialize-release' stamp: 'sjh 4/29/2013 18:39'!initializePortfolio	"initialize portfolio instance variable to a new Portfolio"	self portfolio: PortfolioComposite new.! !!PortfolioManager methodsFor: 'accessing' stamp: 'sjh 4/29/2013 18:07'!portfolio	^ portfolio! !!PortfolioManager methodsFor: 'accessing' stamp: 'sjh 4/29/2013 18:07'!portfolio: anObject	portfolio := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PortfolioManager class	instanceVariableNames: ''!!PortfolioManager class methodsFor: 'instance creation' stamp: 'sjh 4/29/2013 18:08'!getInstance	"return the Singleton instance of Registrar"	UniqueInstance isNil		ifTrue: [UniqueInstance := self basicNew initializePortfolio ].	^UniqueInstance! !!PortfolioManager class methodsFor: 'instance creation' stamp: 'sjh 4/29/2013 18:08'!new	"override new to return an error if anyone tries to instantiate PortfolioManager without calling getInstance"	self error: 'You may not instantiate PortfolioManager using the new message. Use the getInstance message to get the singleton instance of PortfolioManager'! !!PortfolioManager class methodsFor: 'instance creation' stamp: 'sjh 4/29/2013 18:03'!reset	UniqueInstance := nil.! !Object subclass: #PricingVisitor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2'!!PricingVisitor methodsFor: 'visitation' stamp: 'sjh 4/29/2013 18:37'!visitAccount: anObject! !!PricingVisitor methodsFor: 'visitation' stamp: 'sjh 4/29/2013 18:37'!visitBond: anObject! !!PricingVisitor methodsFor: 'visitation' stamp: 'sjh 4/29/2013 18:37'!visitMoneyMarket: anObject! !!PricingVisitor methodsFor: 'visitation' stamp: 'sjh 4/29/2013 18:38'!visitPortfolio: anObject! !!PricingVisitor methodsFor: 'visitation' stamp: 'sjh 4/29/2013 18:37'!visitStock: anObject! !Leaf subclass: #StockLeaf	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2'!