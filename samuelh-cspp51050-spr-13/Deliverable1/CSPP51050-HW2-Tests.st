TestCase subclass: #AccountCompositeTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!!AccountCompositeTests methodsFor: 'testing' stamp: 'sjh 4/29/2013 21:32'!testAccountCompositeCreation	| account |	"self shouldnt: [ account := AccountComposite new initialize. ] raise: Error."	account := AccountComposite new initialize. 	self shouldnt: [ account components isNil ].		! !!AccountCompositeTests methodsFor: 'testing' stamp: 'sjh 4/30/2013 00:29'!testAccountCompositeValue	"test account composite value = sum of all leaves' values"	| account todayDate bond1 bond2 moneyMarket1 stock1 stock2 testIssueDate |	account := AccountComposite new.	account initialize.	todayDate := Date today.	testIssueDate := todayDate subtractDays: 365. "test two years prior to today"		bond1 := BondLeaf new. "add a bond"	bond1 principal: 100 .	bond1 coupon: 0.1 .	bond1 issueDate: testIssueDate.	self should: [bond1 value = 110 ].	account addComponent: bond1.		bond2 := BondLeaf new. "add another bond"	bond2 principal: 200 .	bond2 coupon: 0.25 .	bond2 issueDate: testIssueDate.	self should: [bond2 value = 250 ].	account addComponent: bond2.	self should: [account value = 360 ].		moneyMarket1 := MoneyMarketLeaf new. "add a money market"	moneyMarket1 discountValue: 100.	moneyMarket1 matureValue: 250.	moneyMarket1 daysToMaturity: 30.	testIssueDate := Date today.	testIssueDate := testIssueDate subtractDays: 10.	moneyMarket1 issueDate: testIssueDate.	self should: [ moneyMarket1 value = 150 ]. 	account addComponent: moneyMarket1.	self should: [ account value = 510 ].		stock1 := StockLeaf new.  "add a stock"	stock1 value: 45.	account addComponent: stock1.	self should: [ account value = 555 ].		stock2 := StockLeaf new. "add another stock"	stock2 value: 35.	account addComponent: stock2.	self should: [ account value = 590 ].! !!AccountCompositeTests methodsFor: 'testing' stamp: 'sjh 4/29/2013 22:39'!testAddComponents	"test the addComponents: message. should be able to add Leaf components but not Composite Components"	| account |	account := AccountComposite new initialize.		self shouldnt: [ account addComponent: BondLeaf new.] raise: Error. "adding a Leaf to an AccountComposite should work fine"	self should: [ account addComponent: PortfolioComposite new. ] raise: Error "adding a Composite to an AccountComposite should raise an error"		! !TestCase subclass: #BondLeafTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!!BondLeafTests methodsFor: 'testing' stamp: 'sjh 4/29/2013 23:31'!testBondLeafValue	| bond testIssueDate |	bond := BondLeaf new.	bond principal: 100 .	bond coupon: 0.1 .	testIssueDate := Date today. "test zero days from today"	bond issueDate: testIssueDate.	self should: [bond value = 100 ].	testIssueDate := testIssueDate subtractDays: 365. "test one year prior to today"	bond issueDate: testIssueDate.	self should: [bond value = 110 ].	testIssueDate := testIssueDate subtractDays: 365. "test two years prior to today"	bond issueDate: testIssueDate.	self should: [bond value = 121 ].	testIssueDate := testIssueDate subtractDays: 365. "test three years prior to today"	bond issueDate: testIssueDate.	self should: [bond value = 133.1 ].! !TestCase subclass: #ComponentTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!TestCase subclass: #CompositeTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!!CompositeTests methodsFor: 'testing' stamp: 'sjh 4/30/2013 11:41'!testRemoveComponent	| testPortfolio testAccount testBond testMoneyMarket |		testPortfolio := PortfolioComposite new initialize.	testAccount := AccountComposite new initialize.	testBond := BondLeaf new.	testMoneyMarket := MoneyMarketLeaf new.		testAccount addComponent: testBond.	testAccount addComponent: testMoneyMarket.		self shouldnt: [ testAccount removeComponent: testBond ] raise: Error. "removing a component that is in a composite should not raise an error"	self should: [ testAccount removeComponent: testBond ] raise: Error. "attempting to remove a component that is not in a composite should raise an error"		testPortfolio addComponent: testAccount.	testPortfolio addComponent: testBond.		self shouldnt: [ testPortfolio removeComponent: testAccount ] raise: Error. "removing a composite from a composite should not raise an error"	self shouldnt: [ testPortfolio removeComponent: testBond ] raise: Error. "removing a leaf from a composite should not raise an error"		self should: [ testPortfolio removeComponent: testAccount ] raise: Error. "attempting to remove a composite that is not in a composite should raise an error" 	self should: [ testPortfolio removeComponent: testBond ] raise: Error. "attempting to remove a leaf that is not in a composite should raise an error"! !TestCase subclass: #LeafTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!TestCase subclass: #MoneyMarketLeafTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!!MoneyMarketLeafTests methodsFor: 'testing' stamp: 'sjh 4/29/2013 23:58'!testMoneyMarketLeafValue"calculate the value of a money market security in terms of the value accrued per day up to the mature date"	| security testIssueDate |	security := MoneyMarketLeaf new.	security discountValue: 100.	security matureValue: 250.	security daysToMaturity: 30.	testIssueDate := Date today.	security issueDate: testIssueDate.	self should: [ security value = security discountValue ]. "test 0 days of accrual"	testIssueDate := testIssueDate subtractDays: 10.	security issueDate: testIssueDate.	self should: [ security value = 150 ]. "test 10 days of accrual"	testIssueDate := testIssueDate subtractDays: 10.	security issueDate: testIssueDate.	self should: [ security value = 200 ]. "test 20 days of accrual"	testIssueDate := testIssueDate subtractDays: 5.	security issueDate: testIssueDate.	self should: [ security value = 225 ]. "test 25 days of accrual"	testIssueDate := testIssueDate subtractDays: 5.	security issueDate: testIssueDate.	self should: [ security value = security matureValue ]. "test 30 days of accrual = full duration"	testIssueDate := testIssueDate subtractDays: 1.	security issueDate: testIssueDate.	security issueDate: testIssueDate.	self should: [ security value = security matureValue ]. "test 31 days of accrual >= full duration"! !TestCase subclass: #PortfolioCompositeTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!!PortfolioCompositeTests methodsFor: 'testing' stamp: 'sjh 4/29/2013 22:40'!testAddComponents	"test the addComponents: message. should be able to add Leaf and Composite components"	| account |	account := PortfolioComposite new initialize.		self shouldnt: [ account addComponent: BondLeaf new.] raise: Error. "adding a Leaf to a PortfolioComposite should work fine"	self shouldnt: [ account addComponent: PortfolioComposite new. ] raise: Error "adding a Composite to a PortfolioComposite should work fine"! !!PortfolioCompositeTests methodsFor: 'as yet unclassified' stamp: 'sjh 4/30/2013 13:02'!testPortfolioCompositeValue	| account portfolio1 portfolio2 todayDate bond1 bond2 moneyMarket1 stock1 stock2 testIssueDate |	account := AccountComposite new initialize.	portfolio1 := PortfolioComposite new initialize.	portfolio2 := PortfolioComposite new initialize.	todayDate := Date today.	testIssueDate := todayDate subtractDays: 365. "test two years prior to today"		bond1 := BondLeaf new. "add a bond"	bond1 principal: 100 .	bond1 coupon: 0.1 .	bond1 issueDate: testIssueDate.	self should: [bond1 value = 110 ].	account addComponent: bond1.		bond2 := BondLeaf new. "add another bond"	bond2 principal: 200 .	bond2 coupon: 0.25 .	bond2 issueDate: testIssueDate.	self should: [bond2 value = 250 ].	account addComponent: bond2.	self should: [account value = 360 ].		moneyMarket1 := MoneyMarketLeaf new. "add a money market"	moneyMarket1 discountValue: 100.	moneyMarket1 matureValue: 250.	moneyMarket1 daysToMaturity: 30.	testIssueDate := Date today.	testIssueDate := testIssueDate subtractDays: 10.	moneyMarket1 issueDate: testIssueDate.	self should: [ moneyMarket1 value = 150 ]. 	account addComponent: moneyMarket1.	self should: [ account value = 510 ].		portfolio2 addComponent: account.	self should: [ account value = 510 ].		portfolio1 addComponent: portfolio2.	self should: [ portfolio1 value = 510 ].		stock1 := StockLeaf new.  "add a stock"	stock1 value: 45.	portfolio1 addComponent: stock1.	self should: [ portfolio1 value = 555 ].		stock2 := StockLeaf new. "add another stock"	stock2 value: 35.	portfolio1 addComponent: stock2.	self should: [ portfolio1 value = 590 ].! !!PortfolioCompositeTests methodsFor: 'as yet unclassified' stamp: 'sjh 4/30/2013 13:25'!testPortfolioCompositeValueWithIterator	| iterator account portfolio1 portfolio2 todayDate bond1 bond2 moneyMarket1 stock1 stock2 testIssueDate |	account := AccountComposite new initialize.	portfolio1 := PortfolioComposite new initialize.	portfolio2 := PortfolioComposite new initialize.	todayDate := Date today.	testIssueDate := todayDate subtractDays: 365. "test two years prior to today"		bond1 := BondLeaf new. "add a bond"	bond1 principal: 100 .	bond1 coupon: 0.1 .	bond1 issueDate: testIssueDate.	"self should: [bond1 value = 110 ]."	account addComponent: bond1.		bond2 := BondLeaf new. "add another bond"	bond2 principal: 200 .	bond2 coupon: 0.25 .	bond2 issueDate: testIssueDate.	"self should: [bond2 value = 250 ]."	account addComponent: bond2.	"self should: [account value = 360 ]."		moneyMarket1 := MoneyMarketLeaf new. "add a money market"	moneyMarket1 discountValue: 100.	moneyMarket1 matureValue: 250.	moneyMarket1 daysToMaturity: 30.	testIssueDate := Date today.	testIssueDate := testIssueDate subtractDays: 10.	moneyMarket1 issueDate: testIssueDate.	"self should: [ moneyMarket1 value = 150 ]. "	account addComponent: moneyMarket1.	"self should: [ account value = 510 ]."		portfolio2 addComponent: account.	"self should: [ account value = 510 ]."		portfolio1 addComponent: portfolio2.	"self should: [ portfolio1 value = 510 ]."		stock1 := StockLeaf new.  "add a stock"	stock1 value: 45.	portfolio1 addComponent: stock1.	"self should: [ portfolio1 value = 555 ]."		stock2 := StockLeaf new. "add another stock"	stock2 value: 35.	portfolio1 addComponent: stock2.	"self should: [ portfolio1 value = 590 ]."		iterator := PortfolioIterator on: [portfolio1 components].	self should: [ portfolio1 value:iterator = 590 ].! !TestCase subclass: #PortfolioIteratorTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!!PortfolioIteratorTests methodsFor: 'testing' stamp: 'sjh 4/30/2013 12:55'!testPortfolioIterator	! !TestCase subclass: #PortfolioManagerTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!!PortfolioManagerTests methodsFor: 'testing' stamp: 'sjh 4/29/2013 18:11'!testGetInstance	"confirm that the getInstance message returns a singleton PortfolioManager"	| firstCallToGetInstance secondCallToGetInstance |	PortfolioManager reset. "make sure singleton PortfolioManager has been cleaned up from previous users"	firstCallToGetInstance := PortfolioManager getInstance. "assign an instance of PortfolioManager to firstCallToGetInstance"	self shouldnt: [firstCallToGetInstance isNil]. "firstCallToGetInstance should not be nil"	self shouldnt:[ firstCallToGetInstance portfolio isNil]. "portfolio should be initialized"	secondCallToGetInstance := PortfolioManager getInstance. "assign an instance of PortfolioManager to secondCallToGetInstance"	self shouldnt: [secondCallToGetInstance isNil]. "secondCallToGetInstance should not be nil"	self should: [firstCallToGetInstance = secondCallToGetInstance]. "firstCallToGetInstance should equal secondCallToGetInstance"	PortfolioManager reset. "make sure singleton PortfolioManager is cleaned up for future users"! !!PortfolioManagerTests methodsFor: 'testing' stamp: 'sjh 4/29/2013 18:12'!testNewPortfolioManager	"confirm that calling new on PortfolioManager returns an error because PortfolioManager is a Singleton"		self should: [ PortfolioManager new ] raise: Error! !TestCase subclass: #PricingVisitorTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!TestCase subclass: #StockLeafTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW2-Tests'!