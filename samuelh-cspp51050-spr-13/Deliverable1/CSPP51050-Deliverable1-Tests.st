TestCase subclass: #AccountCompositeTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable1-Tests'!!AccountCompositeTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:21'!testAccountCompositeCreation	"confirm that we can create an AccountComposite"	| account |		account := AccountComposite new. 	self shouldnt: [ account components isNil ].		! !!AccountCompositeTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:22'!testAddComponents	"confirm the addComponents: message. should be able to add Leaf components but not Composite Components"	| account |	account := AccountComposite new.		"adding a Leaf to an AccountComposite should work fine"	self shouldnt: [ account addComponent: BondLeaf new.] raise: Error. 		"adding a Composite to an AccountComposite should raise an error"	self should: [ account addComponent: PortfolioComposite new. ] raise: Error 		! !TestCase subclass: #CompositeTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable1-Tests'!!CompositeTests methodsFor: 'testing' stamp: 'sjh 5/3/2013 05:00'!testRemoveComponent	| testPortfolio testAccount testBond testMoneyMarket |		testPortfolio := PortfolioComposite new.	testAccount := AccountComposite new.	testBond := BondLeaf new.	testMoneyMarket := MoneyMarketLeaf new.		testAccount addComponent: testBond.	testAccount addComponent: testMoneyMarket.		self shouldnt: [ testAccount removeComponent: testBond ] raise: Error. "removing a component that is in a composite should not raise an error"	self should: [ testAccount removeComponent: testBond ] raise: Error. "attempting to remove a component that is not in a composite should raise an error"		testPortfolio addComponent: testAccount.	testPortfolio addComponent: testBond.		self shouldnt: [ testPortfolio removeComponent: testAccount ] raise: Error. "removing a composite from a composite should not raise an error"	self shouldnt: [ testPortfolio removeComponent: testBond ] raise: Error. "removing a leaf from a composite should not raise an error"		self should: [ testPortfolio removeComponent: testAccount ] raise: Error. "attempting to remove a composite that is not in a composite should raise an error" 	self should: [ testPortfolio removeComponent: testBond ] raise: Error. "attempting to remove a leaf that is not in a composite should raise an error"! !TestCase subclass: #PortfolioCompositeTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable1-Tests'!!PortfolioCompositeTests methodsFor: 'testing' stamp: 'sjh 5/3/2013 05:01'!testAddComponents	"test the addComponents: message. should be able to add Leaf and Composite components"	| account |	account := PortfolioComposite new.		self shouldnt: [ account addComponent: BondLeaf new.] raise: Error. "adding a Leaf to a PortfolioComposite should work fine"	self shouldnt: [ account addComponent: PortfolioComposite new. ] raise: Error "adding a Composite to a PortfolioComposite should work fine"! !TestCase subclass: #PortfolioIteratorTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable1-Tests'!!PortfolioIteratorTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:19'!testCurrentItem	"confirm that currentItem returns the correct item"	| iterator portfolio stock1 stock2 |		portfolio := PortfolioComposite new.	stock1 := StockLeaf new.	stock2 := StockLeaf new.	portfolio addComponent: stock1.	portfolio addComponent: stock2.	iterator := portfolio iterator.	iterator first.	self should: [iterator currentItem = stock1].	iterator next.	self should: [iterator currentItem = stock2].	! !!PortfolioIteratorTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:19'!testGetIterator	"confirm that getting a composite's iterator works correctly"	| portfolio iterator stock1 stock2 |		portfolio := PortfolioComposite new.	stock1 := StockLeaf new.	stock2 := StockLeaf new.	portfolio addComponent: stock1; addComponent: stock2.	iterator := portfolio iterator.	self should: [portfolio = iterator contents].! !!PortfolioIteratorTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:19'!testIsDone	"test that our iterator correctly knows when it is done"	| portfolio iterator |		portfolio := PortfolioComposite new.	iterator := portfolio iterator.	iterator first.	self should: [iterator isDone].	portfolio addComponent: StockLeaf new; addComponent: StockLeaf new.	self shouldnt: [iterator isDone].	iterator next.	self shouldnt: [iterator isDone].	iterator next.	self should: [iterator isDone].! !!PortfolioIteratorTests methodsFor: 'testing' stamp: 'sjh 5/6/2013 15:11'!testPortfolioIterator	| account iterator stock1 stock2 |	account := AccountComposite new.	stock1 := StockLeaf new.	stock2 := StockLeaf new.	account addComponent: stock1.	account addComponent: stock2.	self shouldnt: [iterator := account iterator] raise: Error. "creating an iterator shouldn't raise an error"	iterator first.	self should: [iterator currentItem = stock1]. "first element should = stock1"	iterator next.	self should: [iterator currentItem = stock2]. "calling next for the second time should return stock2"	! !TestCase subclass: #PortfolioManagerTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable1-Tests'!!PortfolioManagerTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:17'!testEvaluate	"test creating a large portfolio with nested accounts, portfolios, stocks, bonds, and money markets"	| portfolioManager stockLeaf1 account1 stockLeaf2  stockLeaf3 portfolio2 stockLeaf4 bond1 bond2 moneyMarket1 testIssueDate todayDate |		"make sure we have a fresh PortfolioManager"	portfolioManager := PortfolioManager getInstance.	portfolioManager initializePortfolio.		"set the main portfolio"	portfolioManager portfolio issuer: 'JP Morgan'.		"create some components and add them in a tree under the main portfolio"	stockLeaf1 := StockLeaf new.	stockLeaf1 issuer: 'HP'.	stockLeaf1 componentValue: 500.	portfolioManager portfolio addComponent:  stockLeaf1.	account1 := AccountComposite new.	account1 issuer: 'Wells Fargo'.	stockLeaf2 := StockLeaf new.	stockLeaf2 issuer: 'Bank of America'.	stockLeaf2 componentValue: 234.	account1 addComponent: stockLeaf2.	stockLeaf3 := StockLeaf new.	stockLeaf3 issuer: 'Coca-Cola'.	stockLeaf3 componentValue: 600.	account1 addComponent: stockLeaf3.	portfolioManager portfolio addComponent: account1.	portfolio2 := PortfolioComposite new.	portfolio2 issuer: 'Goldman Sachs'.	stockLeaf4 := StockLeaf new.	stockLeaf4 issuer: 'Miller-Coors'.	stockLeaf4 componentValue: 75.	portfolio2 addComponent: stockLeaf4.		todayDate := Date today.	testIssueDate := todayDate subtractDays: 365. 		bond1 := BondLeaf new. "add a bond"	bond1 issuer: 'Japan'.	bond1 principal: 100 .	bond1 coupon: 0.1 .	bond1 issueDate: testIssueDate.	portfolio2 addComponent: bond1.		bond2 := BondLeaf new. "add another bond"	bond2 issuer: 'France'.	bond2 principal: 200 .	bond2 coupon: 0.25 .	bond2 issueDate: testIssueDate.	portfolio2 addComponent: bond2.		moneyMarket1 := MoneyMarketLeaf new.	moneyMarket1 issuer: 'USA'.	moneyMarket1 discountValue: 100.	moneyMarket1 matureValue: 250.	moneyMarket1 daysToMaturity: 30.	testIssueDate := Date today.	testIssueDate := testIssueDate subtractDays: 10.	moneyMarket1 issueDate: testIssueDate.	portfolio2 addComponent: moneyMarket1.	portfolioManager portfolio addComponent: portfolio2.		"call evaluate on the PortfolioManager instance's main portfolio to calculate its total value recursively"	portfolioManager evaluate.		"confirm the recursively summed value"	self should: [PortfolioManager getInstance visitor sum = 1919].		"reset the PortfolioManager for other clients' use"	PortfolioManager reset.! !!PortfolioManagerTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:18'!testGetInstance	"confirm that the getInstance message returns a singleton PortfolioManager"	| firstCallToGetInstance secondCallToGetInstance |		"make sure singleton PortfolioManager has been cleaned up from previous users"	PortfolioManager reset. 		"assign an instance of PortfolioManager to firstCallToGetInstance"	firstCallToGetInstance := PortfolioManager getInstance.		"firstCallToGetInstance should not be nil"	self shouldnt: [firstCallToGetInstance isNil]. 		"portfolio should be initialized"	self shouldnt:[ firstCallToGetInstance portfolio isNil]. 		"assign an instance of PortfolioManager to secondCallToGetInstance"	secondCallToGetInstance := PortfolioManager getInstance. 		"secondCallToGetInstance should not be nil"	self shouldnt: [secondCallToGetInstance isNil]. 		"firstCallToGetInstance should equal secondCallToGetInstance"	self should: [firstCallToGetInstance = secondCallToGetInstance]. 		"make sure singleton PortfolioManager is cleaned up for future users"	PortfolioManager reset. ! !!PortfolioManagerTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:18'!testNewPortfolioManager	"confirm that calling new on PortfolioManager returns an error because PortfolioManager is a Singleton"	self should: [ PortfolioManager new ] raise: Error! !TestCase subclass: #PricingVisitorTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable1-Tests'!!PricingVisitorTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:06'!testVisitBondLeaf	"visit a bond with different issue dates to confirm that we are calculating the value properly"	| visitor bond testIssueDate |		"make sure we have a fresh PortfolioManager"	PortfolioManager reset.	visitor := PortfolioManager getInstance visitor.	visitor sum: 0.		"initialize the issue date to today"	testIssueDate := Date today. 		"create a bond"	bond := BondLeaf new.	bond principal: 100 .	bond coupon: 0.1 .	bond issueDate: testIssueDate.		"visit the bond"	visitor visitBond: bond.		"confirm its value"	self should: [visitor sum = 100 ].		"reset the visitor's sum"	visitor sum: 0.		"test the value if the bond was issued one year prior to today"	testIssueDate := testIssueDate subtractDays: 365. 	bond issueDate: testIssueDate.		"visit the bond"	visitor visitBond: bond.		"confirm its value"	self should: [visitor sum = 110 ].		"reset the visitor's sum"	visitor sum: 0.		"test the value if the bond was issued two years prior to today"	testIssueDate := testIssueDate subtractDays: 365. 	bond issueDate: testIssueDate.		"visit the bond"	visitor visitBond: bond.		"confirm its value"	self should: [visitor sum = 121 ].		"reset the visitor's sum"	visitor sum: 0.		"test the value if the bond was issued three years prior to today"	testIssueDate := testIssueDate subtractDays: 365. 	bond issueDate: testIssueDate.		"visit the bond"	visitor visitBond: bond.		"confirm its value"	self should: [visitor sum = 133.1 ].		"reset the PortfolioManager instance for other clients' use"	PortfolioManager reset.! !!PricingVisitorTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:13'!testVisitMoneyMarketLeaf	"calculate the value of a money market security in terms of the value accrued per day up to the mature date"	| security testIssueDate aVisitor |		"make sure we have a fresh PortfolioManager"	PortfolioManager reset.	aVisitor := PortfolioManager getInstance visitor.	aVisitor sum: 0.		"initialize the issue date to today"	testIssueDate := Date today.		"create a MoneyMarket"	security := MoneyMarketLeaf new.	security discountValue: 100.	security matureValue: 250.	security daysToMaturity: 30.	security issueDate: testIssueDate.		"visit the MoneyMarket"	aVisitor visitMoneyMarket: security.		"confirm its value after 0 days of accrual"	self should: [ aVisitor sum = security discountValue ]. 		"reset aVisitor"	aVisitor sum: 0.		"test its value if it were issued 10 days ago"	testIssueDate := testIssueDate subtractDays: 10.	security issueDate: testIssueDate.		"visit the MoneyMarket"	aVisitor visitMoneyMarket: security.		"confirm its value after 10 days of accrual"	self should: [ aVisitor sum = 150 ]. 		"reset aVisitor"	aVisitor sum: 0.		"test its value if it were issued 20 days ago"	testIssueDate := testIssueDate subtractDays: 10.	security issueDate: testIssueDate.		"visit the MoneyMarket"	aVisitor visitMoneyMarket: security.		"confirm its value after 20 days of accrual"	self should: [ aVisitor sum = 200 ]. 		"reset aVisitor"	aVisitor sum: 0.		"test its value if it were issued 25 days ago"	testIssueDate := testIssueDate subtractDays: 5.	security issueDate: testIssueDate.		"visit the MoneyMarket"	aVisitor visitMoneyMarket: security.		"confirm its value after 25 days of accrual"	self should: [ aVisitor sum = 225 ]. 		"reset aVisitor"	aVisitor sum: 0.		"test its value if it were issued 30 days ago"	testIssueDate := testIssueDate subtractDays: 5.	security issueDate: testIssueDate.		"visit the MoneyMarket"	aVisitor visitMoneyMarket: security.		"confirm it's at its mature value after 30 days of accrual (full duration)"	self should: [ aVisitor sum = security matureValue ].		"reset aVisitor"	aVisitor sum: 0.		"test its value if it were issued 31 days ago (still at mature value)"	testIssueDate := testIssueDate subtractDays: 1.	security issueDate: testIssueDate.		"visit the MoneyMarket"	aVisitor visitMoneyMarket: security.		"confirm it's still at its mature value after 31 days of accrual (full duration)"	self should: [ aVisitor sum = security matureValue ]. 		"reset the PortfolioManager for other clients' use"	PortfolioManager reset.! !!PricingVisitorTests methodsFor: 'testing' stamp: 'sjh 5/7/2013 15:14'!testVisitStock	"confirm visiting a stock calculates its value properly"	| aStock aVisitor |		"make sure we have a fresh PortfolioManager"	PortfolioManager reset.	aVisitor := PortfolioManager getInstance visitor.	aVisitor sum: 0.		"create a stock"	aStock := StockLeaf new.	aStock componentValue: 500.		"visit the stock"	aVisitor visitStock: aStock.		"confirm that its value is its componentValue"	self should: [aVisitor sum = aStock componentValue].		"reset the PortfolioManager for other clients' use"	PortfolioManager reset.! !