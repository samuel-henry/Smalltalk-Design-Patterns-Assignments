Object subclass: #Broker	instanceVariableNames: 'receiver'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!Broker methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 11:52'!demarshall: formattedString	"convert from formatted string to CallMessage"	| tokens target callMessage |		"instantiate a new CallMessage"	callMessage := CallMessage basicNew.		"tokenize the tab-delimited string input"	tokens := formattedString findTokens: String tab.		"get target server"	target := tokens at: 1.		"set target server on call message if it's valid"	target = 'Lab 2 Server Broker'		ifTrue: [ callMessage target: target ]		ifFalse: [ self error ].		"set message name on call message"	callMessage messageName: [ tokens at: 2] .		"set params on call message based on message type"	callMessage messageName = 'addTo'		ifTrue: [ callMessage params: [ tokens copyFrom: 3 to: 4] ] 		ifFalse: [ callMessage messageName = 'getLength'					ifTrue: [ callMessage params: [ tokens copyFrom: 3 to: 3 ] ]					ifFalse: [ self error ]. ]. "invalid message name -> throw an error"				! !!Broker methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 12:13'!marshall: aCallMessage	"convert from CallMessge to formatted string"		^ aCallMessage target, ',', aCallMessage messageName, ',', aCallMessage params asCommaString. ! !!Broker methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 10:38'!receive: aString		^ self send: [ self demarshall: aString ].! !!Broker methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 11:15'!send: anObject	^ self receiver demarshall: anObject! !Object subclass: #CallMessage	instanceVariableNames: 'messageName params target'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!CallMessage methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 09:55'!initializeWithMessageName: aMessageName params:someParams target: aTarget	messageName := aMessageName.	params := someParams.	target := aTarget.! !!CallMessage methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 11:02'!messageName	^ messageName! !!CallMessage methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 11:02'!params	^ params! !!CallMessage methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 11:03'!target	^ target! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/24/2013 11:41'!messageName: anObject	messageName := anObject! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/24/2013 11:41'!params: anObject	params := anObject! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/24/2013 11:41'!target: anObject	target := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CallMessage class	instanceVariableNames: ''!!CallMessage class methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 09:55'!messageName: aMessageName params:someParams target: aTarget	^ self basicNew initializeWithMessageName: aMessageName params:someParams target: aTarget! !Object subclass: #Client	instanceVariableNames: 'proxy'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!Client methodsFor: 'accessing' stamp: 'sjh 5/24/2013 10:56'!proxy	^ proxy! !!Client methodsFor: 'accessing' stamp: 'sjh 5/24/2013 10:56'!proxy: anObject	proxy := anObject! !Object subclass: #Proxy	instanceVariableNames: 'delegate'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!Proxy methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 10:26'!demarshall: aCallMessage	^ self subclassResponsibility! !!Proxy methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 10:26'!marshall: aCallMessage	^ self subclassResponsibility! !!Proxy methodsFor: 'accessing' stamp: 'sjh 5/24/2013 10:23'!delegate	^ delegate! !!Proxy methodsFor: 'accessing' stamp: 'sjh 5/24/2013 10:23'!delegate: anObject	delegate := anObject! !Proxy subclass: #ClientProxy	instanceVariableNames: 'broker'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!ClientProxy methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 10:28'!add: int1 to: int2	| callMessage params |	params := Dictionary new.	params at: 'int1' put: int1; at: 'int2' put: int2.		callMessage := CallMessage initializeWithMessageName: 'addTo' params: params target: 'Lab 2 Server Broker'.		^ self demarshall: [ self delegate receive: callMessage ]		! !!ClientProxy methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 10:28'!getLength: aString	| callMessage params |	params := Dictionary new.	params at: 'string' put: aString.		callMessage := CallMessage initializeWithMessageName: 'addTo' params: params target: 'Lab 2 Server Broker'.		^ self demarshall: [ self delegate receive: callMessage ]		! !Object subclass: #Server	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!Server methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 09:45'!add: int1 to: int2	^ int1 + int2! !!Server methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 11:11'!getLength: aString	^ aString size! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Server class	instanceVariableNames: ''!!Server class methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 12:00'!lab2server	^ 'Lab 2 Server Broker'! !Proxy subclass: #ServerProxy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!ServerProxy methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 11:26'!demarshall: aCallMessage	"if target not 'Lab 2 Server Broker' return 'That server is currently off-line'"	aCallMessage target = 'Lab 2 Server Broker'		ifFalse: [ ^ 'That server is currently off-line' ].		"call delegate message with params"	aCallMessage messageName = 'addTo'		ifTrue: [ ^ delegate add: [ aCallMessage params at: 'int1' ] to: [ aCallMessage params at: 'int2' ]].		aCallMessage messageName = 'getLength'		ifTrue: [ ^ delegate getLength: [ aCallMessage params at: 'string' ] ].! !