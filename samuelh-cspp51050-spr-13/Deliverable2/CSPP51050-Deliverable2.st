Object subclass: #Broker	instanceVariableNames: 'receiver'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!Broker commentStamp: 'sjh 5/27/2013 18:16' prior: 0!Abstract Broker class implements broker functionality except receive: which is implemented by client/server broker subclasses!!Broker methodsFor: 'actions' stamp: 'sjh 5/27/2013 18:50'!demarshall: formattedString	"convert from formatted string to CallMessage"	| tokens target callMessage |		"instantiate a new CallMessage"	callMessage := CallMessage new.		"tokenize the comma-delimited string input"	tokens := formattedString findTokens: ','.		"get target server"	target := tokens at: 1.		"set target server on call message if it's valid"	target = 'Lab 2 Server Broker'		ifTrue: [ callMessage target: target ]		ifFalse: [ self error ].		"set message name on call message"	callMessage messageName: (tokens at: 2).		"set params on call message based on message type"	callMessage params: Dictionary new.	callMessage messageName = 'addTo'		ifTrue: [ callMessage params at: 'int1' put: ((tokens at: 3) asNumber); at: 'int2' put: ((tokens at: 4) withoutLeadingBlanks asString)] 		ifFalse: [ callMessage messageName = 'getLength'					ifTrue: [ callMessage params at: 'string' put: (tokens at: 3) ]					ifFalse: [ self error ]. ]. "invalid message name -> throw an error"					^ callMessage! !!Broker methodsFor: 'actions' stamp: 'sjh 5/27/2013 17:58'!marshall: aCallMessage	"convert from CallMessge to comma-delimited string"		^ aCallMessage target, ',', aCallMessage messageName, ',', aCallMessage params asCommaString. ! !!Broker methodsFor: 'actions' stamp: 'sjh 5/27/2013 16:37'!receive: aString		^ self subclassResponsibility.! !!Broker methodsFor: 'actions' stamp: 'sjh 5/27/2013 18:15'!send: anObject	^ self receiver receive: anObject! !!Broker methodsFor: 'accessing' stamp: 'sjh 5/27/2013 16:51'!receiver	^ receiver! !!Broker methodsFor: 'accessing' stamp: 'sjh 5/27/2013 16:51'!receiver: anObject	receiver := anObject! !Object subclass: #CallMessage	instanceVariableNames: 'messageName params target returnValue'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!CallMessage commentStamp: 'sjh 5/27/2013 18:17' prior: 0!Standardized object that encapsulates the details of a given remote call and its return!!CallMessage methodsFor: 'initialize-release' stamp: 'sjh 5/24/2013 09:55'!initializeWithMessageName: aMessageName params:someParams target: aTarget	messageName := aMessageName.	params := someParams.	target := aTarget.! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/24/2013 11:02'!messageName	^ messageName! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/24/2013 11:41'!messageName: anObject	messageName := anObject! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/24/2013 11:02'!params	^ params! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/24/2013 11:41'!params: anObject	params := anObject! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/27/2013 18:00'!returnValue	^ returnValue! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/27/2013 16:29'!returnValue: anObject	returnValue := anObject! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/24/2013 11:03'!target	^ target! !!CallMessage methodsFor: 'accessing' stamp: 'sjh 5/24/2013 11:41'!target: anObject	target := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CallMessage class	instanceVariableNames: ''!!CallMessage class methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 09:55'!messageName: aMessageName params:someParams target: aTarget	^ self basicNew initializeWithMessageName: aMessageName params:someParams target: aTarget! !Object subclass: #Client	instanceVariableNames: 'proxy'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!Client commentStamp: 'sjh 5/27/2013 18:17' prior: 0!Holds a proxy to initiate remote brokered calls!!Client methodsFor: 'accessing' stamp: 'sjh 5/24/2013 10:56'!proxy	^ proxy! !!Client methodsFor: 'accessing' stamp: 'sjh 5/24/2013 10:56'!proxy: anObject	proxy := anObject! !Broker subclass: #ClientBroker	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!ClientBroker commentStamp: 'sjh 5/27/2013 18:18' prior: 0!Converts CallMessages to formatted strings and passes them to its ServerBroker counterpart!!ClientBroker methodsFor: 'initialize-release' stamp: 'sjh 5/27/2013 16:52'!initialize	self receiver: ServerBroker new initialize.! !!ClientBroker methodsFor: 'actions' stamp: 'sjh 5/27/2013 18:01'!receive: aCallMessage	^ self send: (self marshall: aCallMessage)! !Object subclass: #Proxy	instanceVariableNames: 'delegate'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!Proxy commentStamp: 'sjh 5/27/2013 18:19' prior: 0!Abstract proxy class holds a delegate for remote calls and defines the interface for marshalling/demarshalling between message calls and the CallMessage standard format!!Proxy methodsFor: 'accessing' stamp: 'sjh 5/24/2013 10:23'!delegate	^ delegate! !!Proxy methodsFor: 'accessing' stamp: 'sjh 5/24/2013 10:23'!delegate: anObject	delegate := anObject! !Proxy subclass: #ClientProxy	instanceVariableNames: 'broker'	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!ClientProxy commentStamp: 'sjh 5/27/2013 18:18' prior: 0!Receives message calls from Client, transforms them to CallMessages and passes them to its ClientBroker!!ClientProxy methodsFor: 'as yet unclassified' stamp: 'sjh 5/27/2013 16:50'!add: int1 to: int2	| callMessage params |	params := Dictionary new.	params at: 'int1' put: int1; at: 'int2' put: int2.		callMessage := CallMessage messageName: 'addTo' params: params target: 'Lab 2 Server Broker'.		^ (self delegate receive: callMessage) returnValue		! !!ClientProxy methodsFor: 'as yet unclassified' stamp: 'sjh 5/27/2013 17:25'!getLength: aString	| callMessage params |	params := Dictionary new.	params at: 'string' put: aString.		callMessage := CallMessage messageName: 'getLength' params: params target: 'Lab 2 Server Broker'.		^ (self delegate receive: callMessage) returnValue		! !!ClientProxy methodsFor: 'as yet unclassified' stamp: 'sjh 5/27/2013 16:52'!initialize	self delegate: ClientBroker new initialize.! !Object subclass: #Server	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!Server commentStamp: 'sjh 5/27/2013 18:20' prior: 0!Performs the requested operation and returns the result!!Server methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 09:45'!add: int1 to: int2	^ int1 + int2! !!Server methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 11:11'!getLength: aString	^ aString size! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Server class	instanceVariableNames: ''!!Server class methodsFor: 'as yet unclassified' stamp: 'sjh 5/24/2013 12:00'!lab2server	^ 'Lab 2 Server Broker'! !Broker subclass: #ServerBroker	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!ServerBroker commentStamp: 'sjh 5/27/2013 18:20' prior: 0!Receives standard formatted strings, transforms them to CallMessages, and passes them to its ServerProxy!!ServerBroker methodsFor: 'actions' stamp: 'sjh 5/27/2013 18:04'!receive: aFormattedString	^ self send: (self demarshall: aFormattedString)! !!ServerBroker methodsFor: 'initialize-release' stamp: 'sjh 5/27/2013 16:53'!initialize	self receiver: ServerProxy new initialize.! !Proxy subclass: #ServerProxy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-Deliverable2'!!ServerProxy commentStamp: 'sjh 5/27/2013 18:21' prior: 0!Receives remote brokered CallMessages representing message calls which it executes on its Server object!!ServerProxy methodsFor: 'initialize-release' stamp: 'sjh 5/27/2013 16:53'!initialize	self delegate: Server new.! !!ServerProxy methodsFor: 'actions' stamp: 'sjh 5/27/2013 18:51'!receive: aCallMessage	"if target not 'Lab 2 Server Broker' return 'That server is currently off-line'"	aCallMessage target = 'Lab 2 Server Broker'		ifFalse: [ aCallMessage returnValue: 'That server is currently off-line'.			       ^ aCallMessage ].	"call delegate message with params"	aCallMessage messageName = 'addTo'		ifTrue: [ aCallMessage returnValue: (self delegate add: (aCallMessage params at: 'int1') to: (aCallMessage params at: 'int2') ).				^ aCallMessage].		aCallMessage messageName = 'getLength'		ifTrue: [ aCallMessage returnValue: (self delegate getLength: (aCallMessage params at: 'string') ).				^ aCallMessage ].				! !