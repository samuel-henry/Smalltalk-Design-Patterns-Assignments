TestCase subclass: #ConstantCurrentTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW3-Tests'!!ConstantCurrentTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 17:46'!testConstantCurrentRecipe	| testUI testRecipe |		"create the test user interface with embedded anonymous machine control and hardware"	testUI := PhFMMUserInterface new initialize machineControl: (PhFMMMachineControl new initialize hardware: PhFMMHardware new).		"confirm that we created the system"	self shouldnt: [ testUI machineControl isNil ].	self shouldnt: [ testUI machineControl hardware isNil ].		"create the constant current recipe"	testRecipe := ConstantCurrentRecipe fromFile: 'HW3_ConstantCurrent.csv' for: testUI machineControl.	self should: [ testRecipe recipeName = 'Cwidget' ].	self should: [ testRecipe mode = 'ConstantCurrent' ].	self should: [ testRecipe partSize = 50 ].		"execute the recipe. this recipe should create a good part."	self should: [testUI executeRecipe: testRecipe].! !TestCase subclass: #ConstantPressureTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW3-Tests'!!ConstantPressureTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 17:46'!testConstantPressureRecipe	| testUI testRecipe |		"create the test user interface with embedded anonymous machine control and hardware"	testUI := PhFMMUserInterface new initialize machineControl: (PhFMMMachineControl new initialize hardware: PhFMMHardware new).		"confirm that we created the system"	self shouldnt: [ testUI machineControl isNil ].	self shouldnt: [ testUI machineControl hardware isNil ].		"create the constant pressure recipe"	testRecipe := ConstantPressureRecipe fromFile: 'hw3_recipe1.csv' for: testUI machineControl.	self should: [ testRecipe recipeName = 'Widget' ].	self should: [ testRecipe mode = 'ConstantPressure' ].	self should: [ testRecipe partSize = 50 ].		"execute the recipe this recipe should create a good part"	self should: [testUI executeRecipe: testRecipe].! !TestCase subclass: #PhFMMHardwareTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW3-Tests'!!PhFMMHardwareTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 17:48'!testMaxValues	"confirm that maximum values for controls are being enforced at the hardware level"	| testHardware testControlValues |		"create a hardware instance"	testHardware := PhFMMHardware new.		"set its controls to acceptable values"	testControlValues := Dictionary new.	testControlValues at: 'PSI' put: 150.	testControlValues at: 'AMPS' put: 150.	testHardware controlValues: testControlValues.	self should: [(testHardware controlValues at: 'PSI') = 150 ].	self should: [(testHardware controlValues at: 'AMPS') = 150 ].		"set its controls to values greater than the maximum acceptable values. confirm that the max values were set instead"	testControlValues at: 'PSI' put: 250.	testControlValues at: 'AMPS' put: 250.	testHardware controlValues: testControlValues.	self should: [(testHardware controlValues at: 'PSI') = 200 ].	self should: [(testHardware controlValues at: 'AMPS') = 200 ].! !!PhFMMHardwareTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 18:50'!testStartStop	"confirm that start/stop are working"	| testHardware |		"instantiate a test hardware object"	testHardware := PhFMMHardware new.		"start the test hardware"	testHardware start.		"confirm that it's running"	self should: [ testHardware isRunning = true].		"stop the test hardware"	testHardware stop.		"confirm that it's not running"	self should: [ testHardware isRunning = false].	! !TestCase subclass: #PhFMMMachineControlTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW3-Tests'!!PhFMMMachineControlTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 17:54'!testExecute	| testMachineControl testRecipe |		"create the test machine control with embedded anonymous inner hardware"	testMachineControl := PhFMMMachineControl new initialize hardware: PhFMMHardware new.		"confirm that we created the system"	self shouldnt: [ testMachineControl hardware isNil ].		"create a ramp recipe"	testRecipe := RampRecipe fromFile: 'HW3_Ramp.csv' for: testMachineControl.		"execute the recipe"	self should: [testMachineControl execute ].! !!PhFMMMachineControlTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 18:19'!testIsValidExecution	| testMachineControl testRecipe |		"create the test machine control with embedded anonymous inner hardware"	testMachineControl := PhFMMMachineControl new initialize hardware: PhFMMHardware new.		"confirm that we created the system"	self shouldnt: [ testMachineControl hardware isNil ].		"create a valid recipe/reference"	testRecipe := RampRecipe fromFile: 'HW3_Ramp.csv' for: testMachineControl.		"attach the valid recipe/reference to our machine control"	testMachineControl recipe: testRecipe.		"execute the recipe. confirm valid part"	self should: [testMachineControl execute ].		"create an invalid recipe/reference"	testRecipe := RampRecipe fromFile: 'HW3_Ramp_Bad_Part.csv' for: testMachineControl.		"attach the invalid recipe/reference to our machine control"	testMachineControl recipe: testRecipe.		"execute the recipe. confirm invalid part"	self shouldnt: [testMachineControl execute ].! !TestCase subclass: #PhFMMUserInterfaceTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW3-Tests'!!PhFMMUserInterfaceTests methodsFor: 'testing' stamp: 'sjh 5/17/2013 15:39'!testControlValues	| testUserInterface testControlValues testValue |	"create a new UI"	testUserInterface := PhFMMUserInterface new initialize.		"create a dictionary of control values for testing"	testControlValues := Dictionary new.	testControlValues at: 'PSI' put: 10; at: 'AMPS' put: 12.		"set the UI's control values to the test values"	testUserInterface controlValues: testControlValues.		"confirm that the UI's reading of the control values returns the test values above"	self should: [ testUserInterface controlValues = testControlValues ].			"verify the individual values for extra assurance"		testValue := testUserInterface controlValues at: 'PSI'.	self should: [testValue = 10 ].	testValue := testUserInterface controlValues at: 'AMPS'.	self should: [testValue = 12 ].	! !!PhFMMUserInterfaceTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 18:21'!testExecuteRecipe	"confirm that executing recipe from the UI works properly"	| testUI testRecipe |		"create the test user interface with embedded anonymous machine control and hardware"	testUI := PhFMMUserInterface new initialize machineControl: (PhFMMMachineControl new initialize hardware: PhFMMHardware new).		"confirm that we created the system"	self shouldnt: [ testUI machineControl isNil ].	self shouldnt: [ testUI machineControl hardware isNil ].		"create a ramp recipe"	testRecipe := RampRecipe fromFile: 'HW3_Ramp.csv' for: testUI machineControl.	self should: [ testRecipe recipeName = 'Rwidget' ].	self should: [ testRecipe mode = 'Ramp' ].	self should: [ testRecipe partSize = 50 ].		"execute the recipe from the UI"	self should: [testUI executeRecipe: testRecipe].! !!PhFMMUserInterfaceTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 18:31'!testManualRun	"test that manual run works properly"	| testUserInterface testControlValues |	"create a new UI"	testUserInterface := PhFMMUserInterface new initialize.		"create a dictionary of control values for testing"	testControlValues := Dictionary new.	testControlValues at: 'PSI' put: 10; at: 'AMPS' put: 12.		"set the UI's control values to the test values"	testUserInterface controlValues: testControlValues.		"manual run should always return valid part created"	self should: [testUserInterface manualRunForTime: 10 ].! !TestCase subclass: #RampTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW3-Tests'!!RampTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 17:54'!testRampRecipe	| testUI testRecipe |		"create the test user interface with embedded anonymous machine control and hardware"	testUI := PhFMMUserInterface new initialize machineControl: (PhFMMMachineControl new initialize hardware: PhFMMHardware new).		"confirm that we created the system"	self shouldnt: [ testUI machineControl isNil ].	self shouldnt: [ testUI machineControl hardware isNil ].		"create the ramp recipe"	testRecipe := RampRecipe fromFile: 'HW3_Ramp.csv' for: testUI machineControl.	self should: [ testRecipe recipeName = 'Rwidget' ].	self should: [ testRecipe mode = 'Ramp' ].	self should: [ testRecipe partSize = 50 ].		"execute the recipe"	self should: [testUI executeRecipe: testRecipe].! !!RampTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 19:28'!testRampRecipeSmallPart	| testUI testRecipe |		"create the test user interface with embedded anonymous machine control and hardware"	testUI := PhFMMUserInterface new initialize machineControl: (PhFMMMachineControl new initialize hardware: PhFMMHardware new).		"confirm that we created the system"	self shouldnt: [ testUI machineControl isNil ].	self shouldnt: [ testUI machineControl hardware isNil ].		"create the ramp recipe"	testRecipe := RampRecipe fromFile: 'HW3_Ramp_Small_Part.csv' for: testUI machineControl.	self should: [ testRecipe recipeName = 'Rwidget' ].	self should: [ testRecipe mode = 'Ramp' ].	self should: [ testRecipe partSize = 5 ].		"execute the recipe. an error will be written because the part size is too small, so the reference file (I just used the same one as HW3_Ramp.csv.reference.csv) won't match, indicating a bad part"	self shouldnt: [testUI executeRecipe: testRecipe].! !TestCase subclass: #RecipeTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CSPP51050-HW3-Tests'!!RecipeTests methodsFor: 'testing' stamp: 'sjh 5/20/2013 18:29'!testInitializeWithFileFor	"confirm that we can initialize a new recipe with correct values and a backpointer to a machine control instance"	| testRecipe |		"create a test recipe"	testRecipe := Recipe fromFile: 'hw3_recipe1.csv' for: PhFMMMachineControl new.		"confirm its back pointer is not nil"	self shouldnt: [ testRecipe machineControl isNil ].		"confirm its values are correct"	self should: [ testRecipe recipeName = 'Widget' ].	self should: [ testRecipe mode = 'ConstantPressure' ].	self should: [ testRecipe partSize = 50 ].! !